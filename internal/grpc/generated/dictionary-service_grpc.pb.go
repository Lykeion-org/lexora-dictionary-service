// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dictionary-service.proto

package lexora

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictionaryService_GetReferent_FullMethodName              = "/lexora.DictionaryService/GetReferent"
	DictionaryService_GetSymbol_FullMethodName                = "/lexora.DictionaryService/GetSymbol"
	DictionaryService_GetWord_FullMethodName                  = "/lexora.DictionaryService/GetWord"
	DictionaryService_ListReferents_FullMethodName            = "/lexora.DictionaryService/ListReferents"
	DictionaryService_FindReferents_FullMethodName            = "/lexora.DictionaryService/FindReferents"
	DictionaryService_CreateReferent_FullMethodName           = "/lexora.DictionaryService/CreateReferent"
	DictionaryService_CreateSymbol_FullMethodName             = "/lexora.DictionaryService/CreateSymbol"
	DictionaryService_CreateWord_FullMethodName               = "/lexora.DictionaryService/CreateWord"
	DictionaryService_UpdateReferent_FullMethodName           = "/lexora.DictionaryService/UpdateReferent"
	DictionaryService_UpdateSymbol_FullMethodName             = "/lexora.DictionaryService/UpdateSymbol"
	DictionaryService_UpdateWord_FullMethodName               = "/lexora.DictionaryService/UpdateWord"
	DictionaryService_DeleteReferent_FullMethodName           = "/lexora.DictionaryService/DeleteReferent"
	DictionaryService_DeleteSymbol_FullMethodName             = "/lexora.DictionaryService/DeleteSymbol"
	DictionaryService_DeleteWord_FullMethodName               = "/lexora.DictionaryService/DeleteWord"
	DictionaryService_LinkSymbolToReferent_FullMethodName     = "/lexora.DictionaryService/LinkSymbolToReferent"
	DictionaryService_LinkWordToSymbol_FullMethodName         = "/lexora.DictionaryService/LinkWordToSymbol"
	DictionaryService_SetSymbolLemma_FullMethodName           = "/lexora.DictionaryService/SetSymbolLemma"
	DictionaryService_UnlinkSymbolFromReferent_FullMethodName = "/lexora.DictionaryService/UnlinkSymbolFromReferent"
	DictionaryService_UnlinkWordFromSymbol_FullMethodName     = "/lexora.DictionaryService/UnlinkWordFromSymbol"
	DictionaryService_ListAllLinkedReferents_FullMethodName   = "/lexora.DictionaryService/ListAllLinkedReferents"
	DictionaryService_ListAllLinkedSymbols_FullMethodName     = "/lexora.DictionaryService/ListAllLinkedSymbols"
)

// DictionaryServiceClient is the client API for DictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryServiceClient interface {
	// READ
	GetReferent(ctx context.Context, in *GetReferentRequest, opts ...grpc.CallOption) (*Referent, error)
	GetSymbol(ctx context.Context, in *GetSymbolRequest, opts ...grpc.CallOption) (*Symbol, error)
	GetWord(ctx context.Context, in *GetWordRequest, opts ...grpc.CallOption) (*Word, error)
	ListReferents(ctx context.Context, in *ListReferentsRequest, opts ...grpc.CallOption) (*ListReferentsResponse, error)
	FindReferents(ctx context.Context, in *FindReferentsRequest, opts ...grpc.CallOption) (*FindReferentsResponse, error)
	// CREATE
	CreateReferent(ctx context.Context, in *CreateReferentRequest, opts ...grpc.CallOption) (*Referent, error)
	CreateSymbol(ctx context.Context, in *CreateSymbolRequest, opts ...grpc.CallOption) (*Symbol, error)
	CreateWord(ctx context.Context, in *CreateWordRequest, opts ...grpc.CallOption) (*Word, error)
	// UPDATE
	UpdateReferent(ctx context.Context, in *UpdateReferentRequest, opts ...grpc.CallOption) (*Referent, error)
	UpdateSymbol(ctx context.Context, in *UpdateSymbolRequest, opts ...grpc.CallOption) (*Symbol, error)
	UpdateWord(ctx context.Context, in *UpdateWordRequest, opts ...grpc.CallOption) (*Word, error)
	// DELETE
	DeleteReferent(ctx context.Context, in *DeleteReferentRequest, opts ...grpc.CallOption) (*Referent, error)
	DeleteSymbol(ctx context.Context, in *DeleteSymbolRequest, opts ...grpc.CallOption) (*Symbol, error)
	DeleteWord(ctx context.Context, in *DeleteWordRequest, opts ...grpc.CallOption) (*Word, error)
	// LINKING OPERATIONS
	LinkSymbolToReferent(ctx context.Context, in *LinkSymbolToReferentRequest, opts ...grpc.CallOption) (*LinkSymbolToReferentResponse, error)
	LinkWordToSymbol(ctx context.Context, in *LinkWordToSymbolRequest, opts ...grpc.CallOption) (*LinkWordToSymbolResponse, error)
	SetSymbolLemma(ctx context.Context, in *SetSymbolLemmaRequest, opts ...grpc.CallOption) (*SetSymbolLemmaResponse, error)
	// TODO
	UnlinkSymbolFromReferent(ctx context.Context, in *UnlinkSymbolFromReferentRequest, opts ...grpc.CallOption) (*UnlinkSymbolFromReferentResponse, error)
	UnlinkWordFromSymbol(ctx context.Context, in *UnlinkWordFromSymbolRequest, opts ...grpc.CallOption) (*UnlinkWordFromSymbolResponse, error)
	ListAllLinkedReferents(ctx context.Context, in *ListAllLinkedReferentsRequest, opts ...grpc.CallOption) (*ListAllLinkedReferentsResponse, error)
	ListAllLinkedSymbols(ctx context.Context, in *ListAllLinkedSymbolsRequest, opts ...grpc.CallOption) (*ListAllLinkedSymbolsResponse, error)
}

type dictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryServiceClient(cc grpc.ClientConnInterface) DictionaryServiceClient {
	return &dictionaryServiceClient{cc}
}

func (c *dictionaryServiceClient) GetReferent(ctx context.Context, in *GetReferentRequest, opts ...grpc.CallOption) (*Referent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Referent)
	err := c.cc.Invoke(ctx, DictionaryService_GetReferent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetSymbol(ctx context.Context, in *GetSymbolRequest, opts ...grpc.CallOption) (*Symbol, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Symbol)
	err := c.cc.Invoke(ctx, DictionaryService_GetSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetWord(ctx context.Context, in *GetWordRequest, opts ...grpc.CallOption) (*Word, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Word)
	err := c.cc.Invoke(ctx, DictionaryService_GetWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) ListReferents(ctx context.Context, in *ListReferentsRequest, opts ...grpc.CallOption) (*ListReferentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReferentsResponse)
	err := c.cc.Invoke(ctx, DictionaryService_ListReferents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) FindReferents(ctx context.Context, in *FindReferentsRequest, opts ...grpc.CallOption) (*FindReferentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindReferentsResponse)
	err := c.cc.Invoke(ctx, DictionaryService_FindReferents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) CreateReferent(ctx context.Context, in *CreateReferentRequest, opts ...grpc.CallOption) (*Referent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Referent)
	err := c.cc.Invoke(ctx, DictionaryService_CreateReferent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) CreateSymbol(ctx context.Context, in *CreateSymbolRequest, opts ...grpc.CallOption) (*Symbol, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Symbol)
	err := c.cc.Invoke(ctx, DictionaryService_CreateSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) CreateWord(ctx context.Context, in *CreateWordRequest, opts ...grpc.CallOption) (*Word, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Word)
	err := c.cc.Invoke(ctx, DictionaryService_CreateWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) UpdateReferent(ctx context.Context, in *UpdateReferentRequest, opts ...grpc.CallOption) (*Referent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Referent)
	err := c.cc.Invoke(ctx, DictionaryService_UpdateReferent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) UpdateSymbol(ctx context.Context, in *UpdateSymbolRequest, opts ...grpc.CallOption) (*Symbol, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Symbol)
	err := c.cc.Invoke(ctx, DictionaryService_UpdateSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) UpdateWord(ctx context.Context, in *UpdateWordRequest, opts ...grpc.CallOption) (*Word, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Word)
	err := c.cc.Invoke(ctx, DictionaryService_UpdateWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) DeleteReferent(ctx context.Context, in *DeleteReferentRequest, opts ...grpc.CallOption) (*Referent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Referent)
	err := c.cc.Invoke(ctx, DictionaryService_DeleteReferent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) DeleteSymbol(ctx context.Context, in *DeleteSymbolRequest, opts ...grpc.CallOption) (*Symbol, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Symbol)
	err := c.cc.Invoke(ctx, DictionaryService_DeleteSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) DeleteWord(ctx context.Context, in *DeleteWordRequest, opts ...grpc.CallOption) (*Word, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Word)
	err := c.cc.Invoke(ctx, DictionaryService_DeleteWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) LinkSymbolToReferent(ctx context.Context, in *LinkSymbolToReferentRequest, opts ...grpc.CallOption) (*LinkSymbolToReferentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkSymbolToReferentResponse)
	err := c.cc.Invoke(ctx, DictionaryService_LinkSymbolToReferent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) LinkWordToSymbol(ctx context.Context, in *LinkWordToSymbolRequest, opts ...grpc.CallOption) (*LinkWordToSymbolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkWordToSymbolResponse)
	err := c.cc.Invoke(ctx, DictionaryService_LinkWordToSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) SetSymbolLemma(ctx context.Context, in *SetSymbolLemmaRequest, opts ...grpc.CallOption) (*SetSymbolLemmaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSymbolLemmaResponse)
	err := c.cc.Invoke(ctx, DictionaryService_SetSymbolLemma_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) UnlinkSymbolFromReferent(ctx context.Context, in *UnlinkSymbolFromReferentRequest, opts ...grpc.CallOption) (*UnlinkSymbolFromReferentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlinkSymbolFromReferentResponse)
	err := c.cc.Invoke(ctx, DictionaryService_UnlinkSymbolFromReferent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) UnlinkWordFromSymbol(ctx context.Context, in *UnlinkWordFromSymbolRequest, opts ...grpc.CallOption) (*UnlinkWordFromSymbolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlinkWordFromSymbolResponse)
	err := c.cc.Invoke(ctx, DictionaryService_UnlinkWordFromSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) ListAllLinkedReferents(ctx context.Context, in *ListAllLinkedReferentsRequest, opts ...grpc.CallOption) (*ListAllLinkedReferentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllLinkedReferentsResponse)
	err := c.cc.Invoke(ctx, DictionaryService_ListAllLinkedReferents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) ListAllLinkedSymbols(ctx context.Context, in *ListAllLinkedSymbolsRequest, opts ...grpc.CallOption) (*ListAllLinkedSymbolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllLinkedSymbolsResponse)
	err := c.cc.Invoke(ctx, DictionaryService_ListAllLinkedSymbols_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServiceServer is the server API for DictionaryService service.
// All implementations must embed UnimplementedDictionaryServiceServer
// for forward compatibility.
type DictionaryServiceServer interface {
	// READ
	GetReferent(context.Context, *GetReferentRequest) (*Referent, error)
	GetSymbol(context.Context, *GetSymbolRequest) (*Symbol, error)
	GetWord(context.Context, *GetWordRequest) (*Word, error)
	ListReferents(context.Context, *ListReferentsRequest) (*ListReferentsResponse, error)
	FindReferents(context.Context, *FindReferentsRequest) (*FindReferentsResponse, error)
	// CREATE
	CreateReferent(context.Context, *CreateReferentRequest) (*Referent, error)
	CreateSymbol(context.Context, *CreateSymbolRequest) (*Symbol, error)
	CreateWord(context.Context, *CreateWordRequest) (*Word, error)
	// UPDATE
	UpdateReferent(context.Context, *UpdateReferentRequest) (*Referent, error)
	UpdateSymbol(context.Context, *UpdateSymbolRequest) (*Symbol, error)
	UpdateWord(context.Context, *UpdateWordRequest) (*Word, error)
	// DELETE
	DeleteReferent(context.Context, *DeleteReferentRequest) (*Referent, error)
	DeleteSymbol(context.Context, *DeleteSymbolRequest) (*Symbol, error)
	DeleteWord(context.Context, *DeleteWordRequest) (*Word, error)
	// LINKING OPERATIONS
	LinkSymbolToReferent(context.Context, *LinkSymbolToReferentRequest) (*LinkSymbolToReferentResponse, error)
	LinkWordToSymbol(context.Context, *LinkWordToSymbolRequest) (*LinkWordToSymbolResponse, error)
	SetSymbolLemma(context.Context, *SetSymbolLemmaRequest) (*SetSymbolLemmaResponse, error)
	// TODO
	UnlinkSymbolFromReferent(context.Context, *UnlinkSymbolFromReferentRequest) (*UnlinkSymbolFromReferentResponse, error)
	UnlinkWordFromSymbol(context.Context, *UnlinkWordFromSymbolRequest) (*UnlinkWordFromSymbolResponse, error)
	ListAllLinkedReferents(context.Context, *ListAllLinkedReferentsRequest) (*ListAllLinkedReferentsResponse, error)
	ListAllLinkedSymbols(context.Context, *ListAllLinkedSymbolsRequest) (*ListAllLinkedSymbolsResponse, error)
	mustEmbedUnimplementedDictionaryServiceServer()
}

// UnimplementedDictionaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictionaryServiceServer struct{}

func (UnimplementedDictionaryServiceServer) GetReferent(context.Context, *GetReferentRequest) (*Referent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferent not implemented")
}
func (UnimplementedDictionaryServiceServer) GetSymbol(context.Context, *GetSymbolRequest) (*Symbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbol not implemented")
}
func (UnimplementedDictionaryServiceServer) GetWord(context.Context, *GetWordRequest) (*Word, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWord not implemented")
}
func (UnimplementedDictionaryServiceServer) ListReferents(context.Context, *ListReferentsRequest) (*ListReferentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferents not implemented")
}
func (UnimplementedDictionaryServiceServer) FindReferents(context.Context, *FindReferentsRequest) (*FindReferentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindReferents not implemented")
}
func (UnimplementedDictionaryServiceServer) CreateReferent(context.Context, *CreateReferentRequest) (*Referent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferent not implemented")
}
func (UnimplementedDictionaryServiceServer) CreateSymbol(context.Context, *CreateSymbolRequest) (*Symbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymbol not implemented")
}
func (UnimplementedDictionaryServiceServer) CreateWord(context.Context, *CreateWordRequest) (*Word, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWord not implemented")
}
func (UnimplementedDictionaryServiceServer) UpdateReferent(context.Context, *UpdateReferentRequest) (*Referent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReferent not implemented")
}
func (UnimplementedDictionaryServiceServer) UpdateSymbol(context.Context, *UpdateSymbolRequest) (*Symbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSymbol not implemented")
}
func (UnimplementedDictionaryServiceServer) UpdateWord(context.Context, *UpdateWordRequest) (*Word, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWord not implemented")
}
func (UnimplementedDictionaryServiceServer) DeleteReferent(context.Context, *DeleteReferentRequest) (*Referent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReferent not implemented")
}
func (UnimplementedDictionaryServiceServer) DeleteSymbol(context.Context, *DeleteSymbolRequest) (*Symbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSymbol not implemented")
}
func (UnimplementedDictionaryServiceServer) DeleteWord(context.Context, *DeleteWordRequest) (*Word, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWord not implemented")
}
func (UnimplementedDictionaryServiceServer) LinkSymbolToReferent(context.Context, *LinkSymbolToReferentRequest) (*LinkSymbolToReferentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkSymbolToReferent not implemented")
}
func (UnimplementedDictionaryServiceServer) LinkWordToSymbol(context.Context, *LinkWordToSymbolRequest) (*LinkWordToSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkWordToSymbol not implemented")
}
func (UnimplementedDictionaryServiceServer) SetSymbolLemma(context.Context, *SetSymbolLemmaRequest) (*SetSymbolLemmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSymbolLemma not implemented")
}
func (UnimplementedDictionaryServiceServer) UnlinkSymbolFromReferent(context.Context, *UnlinkSymbolFromReferentRequest) (*UnlinkSymbolFromReferentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkSymbolFromReferent not implemented")
}
func (UnimplementedDictionaryServiceServer) UnlinkWordFromSymbol(context.Context, *UnlinkWordFromSymbolRequest) (*UnlinkWordFromSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkWordFromSymbol not implemented")
}
func (UnimplementedDictionaryServiceServer) ListAllLinkedReferents(context.Context, *ListAllLinkedReferentsRequest) (*ListAllLinkedReferentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllLinkedReferents not implemented")
}
func (UnimplementedDictionaryServiceServer) ListAllLinkedSymbols(context.Context, *ListAllLinkedSymbolsRequest) (*ListAllLinkedSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllLinkedSymbols not implemented")
}
func (UnimplementedDictionaryServiceServer) mustEmbedUnimplementedDictionaryServiceServer() {}
func (UnimplementedDictionaryServiceServer) testEmbeddedByValue()                           {}

// UnsafeDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServiceServer will
// result in compilation errors.
type UnsafeDictionaryServiceServer interface {
	mustEmbedUnimplementedDictionaryServiceServer()
}

func RegisterDictionaryServiceServer(s grpc.ServiceRegistrar, srv DictionaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictionaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictionaryService_ServiceDesc, srv)
}

func _DictionaryService_GetReferent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetReferent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetReferent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetReferent(ctx, req.(*GetReferentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetSymbol(ctx, req.(*GetSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetWord(ctx, req.(*GetWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_ListReferents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).ListReferents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_ListReferents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).ListReferents(ctx, req.(*ListReferentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_FindReferents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindReferentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).FindReferents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_FindReferents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).FindReferents(ctx, req.(*FindReferentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_CreateReferent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).CreateReferent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_CreateReferent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).CreateReferent(ctx, req.(*CreateReferentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_CreateSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).CreateSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_CreateSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).CreateSymbol(ctx, req.(*CreateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_CreateWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).CreateWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_CreateWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).CreateWord(ctx, req.(*CreateWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_UpdateReferent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReferentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).UpdateReferent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_UpdateReferent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).UpdateReferent(ctx, req.(*UpdateReferentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_UpdateSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).UpdateSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_UpdateSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).UpdateSymbol(ctx, req.(*UpdateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_UpdateWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).UpdateWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_UpdateWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).UpdateWord(ctx, req.(*UpdateWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_DeleteReferent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReferentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).DeleteReferent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_DeleteReferent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).DeleteReferent(ctx, req.(*DeleteReferentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_DeleteSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).DeleteSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_DeleteSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).DeleteSymbol(ctx, req.(*DeleteSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_DeleteWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).DeleteWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_DeleteWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).DeleteWord(ctx, req.(*DeleteWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_LinkSymbolToReferent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkSymbolToReferentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).LinkSymbolToReferent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_LinkSymbolToReferent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).LinkSymbolToReferent(ctx, req.(*LinkSymbolToReferentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_LinkWordToSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkWordToSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).LinkWordToSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_LinkWordToSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).LinkWordToSymbol(ctx, req.(*LinkWordToSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_SetSymbolLemma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSymbolLemmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).SetSymbolLemma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_SetSymbolLemma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).SetSymbolLemma(ctx, req.(*SetSymbolLemmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_UnlinkSymbolFromReferent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkSymbolFromReferentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).UnlinkSymbolFromReferent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_UnlinkSymbolFromReferent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).UnlinkSymbolFromReferent(ctx, req.(*UnlinkSymbolFromReferentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_UnlinkWordFromSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkWordFromSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).UnlinkWordFromSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_UnlinkWordFromSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).UnlinkWordFromSymbol(ctx, req.(*UnlinkWordFromSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_ListAllLinkedReferents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllLinkedReferentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).ListAllLinkedReferents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_ListAllLinkedReferents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).ListAllLinkedReferents(ctx, req.(*ListAllLinkedReferentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_ListAllLinkedSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllLinkedSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).ListAllLinkedSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_ListAllLinkedSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).ListAllLinkedSymbols(ctx, req.(*ListAllLinkedSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionaryService_ServiceDesc is the grpc.ServiceDesc for DictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lexora.DictionaryService",
	HandlerType: (*DictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferent",
			Handler:    _DictionaryService_GetReferent_Handler,
		},
		{
			MethodName: "GetSymbol",
			Handler:    _DictionaryService_GetSymbol_Handler,
		},
		{
			MethodName: "GetWord",
			Handler:    _DictionaryService_GetWord_Handler,
		},
		{
			MethodName: "ListReferents",
			Handler:    _DictionaryService_ListReferents_Handler,
		},
		{
			MethodName: "FindReferents",
			Handler:    _DictionaryService_FindReferents_Handler,
		},
		{
			MethodName: "CreateReferent",
			Handler:    _DictionaryService_CreateReferent_Handler,
		},
		{
			MethodName: "CreateSymbol",
			Handler:    _DictionaryService_CreateSymbol_Handler,
		},
		{
			MethodName: "CreateWord",
			Handler:    _DictionaryService_CreateWord_Handler,
		},
		{
			MethodName: "UpdateReferent",
			Handler:    _DictionaryService_UpdateReferent_Handler,
		},
		{
			MethodName: "UpdateSymbol",
			Handler:    _DictionaryService_UpdateSymbol_Handler,
		},
		{
			MethodName: "UpdateWord",
			Handler:    _DictionaryService_UpdateWord_Handler,
		},
		{
			MethodName: "DeleteReferent",
			Handler:    _DictionaryService_DeleteReferent_Handler,
		},
		{
			MethodName: "DeleteSymbol",
			Handler:    _DictionaryService_DeleteSymbol_Handler,
		},
		{
			MethodName: "DeleteWord",
			Handler:    _DictionaryService_DeleteWord_Handler,
		},
		{
			MethodName: "LinkSymbolToReferent",
			Handler:    _DictionaryService_LinkSymbolToReferent_Handler,
		},
		{
			MethodName: "LinkWordToSymbol",
			Handler:    _DictionaryService_LinkWordToSymbol_Handler,
		},
		{
			MethodName: "SetSymbolLemma",
			Handler:    _DictionaryService_SetSymbolLemma_Handler,
		},
		{
			MethodName: "UnlinkSymbolFromReferent",
			Handler:    _DictionaryService_UnlinkSymbolFromReferent_Handler,
		},
		{
			MethodName: "UnlinkWordFromSymbol",
			Handler:    _DictionaryService_UnlinkWordFromSymbol_Handler,
		},
		{
			MethodName: "ListAllLinkedReferents",
			Handler:    _DictionaryService_ListAllLinkedReferents_Handler,
		},
		{
			MethodName: "ListAllLinkedSymbols",
			Handler:    _DictionaryService_ListAllLinkedSymbols_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictionary-service.proto",
}
