// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: language/types.proto

package language

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WordType int32

const (
	WordType_WORD_TYPE_UNSPECIFIED  WordType = 0
	WordType_WORD_TYPE_NOUN         WordType = 1
	WordType_WORD_TYPE_VERB         WordType = 2
	WordType_WORD_TYPE_ADJECTIVE    WordType = 3
	WordType_WORD_TYPE_ADVERB       WordType = 4
	WordType_WORD_TYPE_PRONOUN      WordType = 5
	WordType_WORD_TYPE_PREPOSITION  WordType = 6
	WordType_WORD_TYPE_CONJUNCTION  WordType = 7
	WordType_WORD_TYPE_INTERJECTION WordType = 8
	WordType_WORD_TYPE_DETERMINER   WordType = 9
)

// Enum value maps for WordType.
var (
	WordType_name = map[int32]string{
		0: "WORD_TYPE_UNSPECIFIED",
		1: "WORD_TYPE_NOUN",
		2: "WORD_TYPE_VERB",
		3: "WORD_TYPE_ADJECTIVE",
		4: "WORD_TYPE_ADVERB",
		5: "WORD_TYPE_PRONOUN",
		6: "WORD_TYPE_PREPOSITION",
		7: "WORD_TYPE_CONJUNCTION",
		8: "WORD_TYPE_INTERJECTION",
		9: "WORD_TYPE_DETERMINER",
	}
	WordType_value = map[string]int32{
		"WORD_TYPE_UNSPECIFIED":  0,
		"WORD_TYPE_NOUN":         1,
		"WORD_TYPE_VERB":         2,
		"WORD_TYPE_ADJECTIVE":    3,
		"WORD_TYPE_ADVERB":       4,
		"WORD_TYPE_PRONOUN":      5,
		"WORD_TYPE_PREPOSITION":  6,
		"WORD_TYPE_CONJUNCTION":  7,
		"WORD_TYPE_INTERJECTION": 8,
		"WORD_TYPE_DETERMINER":   9,
	}
)

func (x WordType) Enum() *WordType {
	p := new(WordType)
	*p = x
	return p
}

func (x WordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WordType) Descriptor() protoreflect.EnumDescriptor {
	return file_language_types_proto_enumTypes[0].Descriptor()
}

func (WordType) Type() protoreflect.EnumType {
	return &file_language_types_proto_enumTypes[0]
}

func (x WordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WordType.Descriptor instead.
func (WordType) EnumDescriptor() ([]byte, []int) {
	return file_language_types_proto_rawDescGZIP(), []int{0}
}

type SymbolType int32

const (
	SymbolType_SYMBOL_TYPE_OBJECT   SymbolType = 0
	SymbolType_SYMBOL_TYPE_ACTION   SymbolType = 1
	SymbolType_SYMBOL_TYPE_MODIFIER SymbolType = 2
)

// Enum value maps for SymbolType.
var (
	SymbolType_name = map[int32]string{
		0: "SYMBOL_TYPE_OBJECT",
		1: "SYMBOL_TYPE_ACTION",
		2: "SYMBOL_TYPE_MODIFIER",
	}
	SymbolType_value = map[string]int32{
		"SYMBOL_TYPE_OBJECT":   0,
		"SYMBOL_TYPE_ACTION":   1,
		"SYMBOL_TYPE_MODIFIER": 2,
	}
)

func (x SymbolType) Enum() *SymbolType {
	p := new(SymbolType)
	*p = x
	return p
}

func (x SymbolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolType) Descriptor() protoreflect.EnumDescriptor {
	return file_language_types_proto_enumTypes[1].Descriptor()
}

func (SymbolType) Type() protoreflect.EnumType {
	return &file_language_types_proto_enumTypes[1]
}

func (x SymbolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolType.Descriptor instead.
func (SymbolType) EnumDescriptor() ([]byte, []int) {
	return file_language_types_proto_rawDescGZIP(), []int{1}
}

type Language int32

const (
	Language_LANGUAGE_UNSPECIFIED Language = 0
	Language_LANGUAGE_EN          Language = 1
	Language_LANGUAGE_NL          Language = 2
	Language_LANGUAGE_ES          Language = 3
	Language_LANGUAGE_PT          Language = 4
	Language_LANGUAGE_DE          Language = 5
	Language_LANGUAGE_FR          Language = 6
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "LANGUAGE_UNSPECIFIED",
		1: "LANGUAGE_EN",
		2: "LANGUAGE_NL",
		3: "LANGUAGE_ES",
		4: "LANGUAGE_PT",
		5: "LANGUAGE_DE",
		6: "LANGUAGE_FR",
	}
	Language_value = map[string]int32{
		"LANGUAGE_UNSPECIFIED": 0,
		"LANGUAGE_EN":          1,
		"LANGUAGE_NL":          2,
		"LANGUAGE_ES":          3,
		"LANGUAGE_PT":          4,
		"LANGUAGE_DE":          5,
		"LANGUAGE_FR":          6,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_language_types_proto_enumTypes[2].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_language_types_proto_enumTypes[2]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_language_types_proto_rawDescGZIP(), []int{2}
}

type Word struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Word          string                 `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	SoundSource   string                 `protobuf:"bytes,3,opt,name=sound_source,json=soundSource,proto3" json:"sound_source,omitempty"`
	Ipa           string                 `protobuf:"bytes,4,opt,name=ipa,proto3" json:"ipa,omitempty"`
	WordType      WordType               `protobuf:"varint,5,opt,name=word_type,json=wordType,proto3,enum=language.WordType" json:"word_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Word) Reset() {
	*x = Word{}
	mi := &file_language_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_language_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_language_types_proto_rawDescGZIP(), []int{0}
}

func (x *Word) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Word) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Word) GetSoundSource() string {
	if x != nil {
		return x.SoundSource
	}
	return ""
}

func (x *Word) GetIpa() string {
	if x != nil {
		return x.Ipa
	}
	return ""
}

func (x *Word) GetWordType() WordType {
	if x != nil {
		return x.WordType
	}
	return WordType_WORD_TYPE_UNSPECIFIED
}

type Symbol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Language      Language               `protobuf:"varint,2,opt,name=language,proto3,enum=language.Language" json:"language,omitempty"`
	SymbolType    SymbolType             `protobuf:"varint,3,opt,name=symbol_type,json=symbolType,proto3,enum=language.SymbolType" json:"symbol_type,omitempty"`
	Lemma         *Word                  `protobuf:"bytes,4,opt,name=lemma,proto3" json:"lemma,omitempty"`
	Words         []*Word                `protobuf:"bytes,5,rep,name=words,proto3" json:"words,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	mi := &file_language_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_language_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_language_types_proto_rawDescGZIP(), []int{1}
}

func (x *Symbol) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Symbol) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_LANGUAGE_UNSPECIFIED
}

func (x *Symbol) GetSymbolType() SymbolType {
	if x != nil {
		return x.SymbolType
	}
	return SymbolType_SYMBOL_TYPE_OBJECT
}

func (x *Symbol) GetLemma() *Word {
	if x != nil {
		return x.Lemma
	}
	return nil
}

func (x *Symbol) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

type Referent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	EnReference   string                 `protobuf:"bytes,2,opt,name=en_reference,json=enReference,proto3" json:"en_reference,omitempty"`
	ImageSource   string                 `protobuf:"bytes,3,opt,name=image_source,json=imageSource,proto3" json:"image_source,omitempty"`
	Symbols       []*Symbol              `protobuf:"bytes,4,rep,name=symbols,proto3" json:"symbols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Referent) Reset() {
	*x = Referent{}
	mi := &file_language_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Referent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referent) ProtoMessage() {}

func (x *Referent) ProtoReflect() protoreflect.Message {
	mi := &file_language_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referent.ProtoReflect.Descriptor instead.
func (*Referent) Descriptor() ([]byte, []int) {
	return file_language_types_proto_rawDescGZIP(), []int{2}
}

func (x *Referent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Referent) GetEnReference() string {
	if x != nil {
		return x.EnReference
	}
	return ""
}

func (x *Referent) GetImageSource() string {
	if x != nil {
		return x.ImageSource
	}
	return ""
}

func (x *Referent) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

var File_language_types_proto protoreflect.FileDescriptor

const file_language_types_proto_rawDesc = "" +
	"\n" +
	"\x14language/types.proto\x12\blanguage\"\x92\x01\n" +
	"\x04Word\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12\x12\n" +
	"\x04word\x18\x02 \x01(\tR\x04word\x12!\n" +
	"\fsound_source\x18\x03 \x01(\tR\vsoundSource\x12\x10\n" +
	"\x03ipa\x18\x04 \x01(\tR\x03ipa\x12/\n" +
	"\tword_type\x18\x05 \x01(\x0e2\x12.language.WordTypeR\bwordType\"\xcd\x01\n" +
	"\x06Symbol\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12.\n" +
	"\blanguage\x18\x02 \x01(\x0e2\x12.language.LanguageR\blanguage\x125\n" +
	"\vsymbol_type\x18\x03 \x01(\x0e2\x14.language.SymbolTypeR\n" +
	"symbolType\x12$\n" +
	"\x05lemma\x18\x04 \x01(\v2\x0e.language.WordR\x05lemma\x12$\n" +
	"\x05words\x18\x05 \x03(\v2\x0e.language.WordR\x05words\"\x8e\x01\n" +
	"\bReferent\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\tR\x03uid\x12!\n" +
	"\fen_reference\x18\x02 \x01(\tR\venReference\x12!\n" +
	"\fimage_source\x18\x03 \x01(\tR\vimageSource\x12*\n" +
	"\asymbols\x18\x04 \x03(\v2\x10.language.SymbolR\asymbols*\xff\x01\n" +
	"\bWordType\x12\x19\n" +
	"\x15WORD_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eWORD_TYPE_NOUN\x10\x01\x12\x12\n" +
	"\x0eWORD_TYPE_VERB\x10\x02\x12\x17\n" +
	"\x13WORD_TYPE_ADJECTIVE\x10\x03\x12\x14\n" +
	"\x10WORD_TYPE_ADVERB\x10\x04\x12\x15\n" +
	"\x11WORD_TYPE_PRONOUN\x10\x05\x12\x19\n" +
	"\x15WORD_TYPE_PREPOSITION\x10\x06\x12\x19\n" +
	"\x15WORD_TYPE_CONJUNCTION\x10\a\x12\x1a\n" +
	"\x16WORD_TYPE_INTERJECTION\x10\b\x12\x18\n" +
	"\x14WORD_TYPE_DETERMINER\x10\t*V\n" +
	"\n" +
	"SymbolType\x12\x16\n" +
	"\x12SYMBOL_TYPE_OBJECT\x10\x00\x12\x16\n" +
	"\x12SYMBOL_TYPE_ACTION\x10\x01\x12\x18\n" +
	"\x14SYMBOL_TYPE_MODIFIER\x10\x02*\x8a\x01\n" +
	"\bLanguage\x12\x18\n" +
	"\x14LANGUAGE_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vLANGUAGE_EN\x10\x01\x12\x0f\n" +
	"\vLANGUAGE_NL\x10\x02\x12\x0f\n" +
	"\vLANGUAGE_ES\x10\x03\x12\x0f\n" +
	"\vLANGUAGE_PT\x10\x04\x12\x0f\n" +
	"\vLANGUAGE_DE\x10\x05\x12\x0f\n" +
	"\vLANGUAGE_FR\x10\x06BXZVgithub.com/Lykeion/lexora-dictionary-service/internal/grpc/generated/language;languageb\x06proto3"

var (
	file_language_types_proto_rawDescOnce sync.Once
	file_language_types_proto_rawDescData []byte
)

func file_language_types_proto_rawDescGZIP() []byte {
	file_language_types_proto_rawDescOnce.Do(func() {
		file_language_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_language_types_proto_rawDesc), len(file_language_types_proto_rawDesc)))
	})
	return file_language_types_proto_rawDescData
}

var file_language_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_language_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_language_types_proto_goTypes = []any{
	(WordType)(0),    // 0: language.WordType
	(SymbolType)(0),  // 1: language.SymbolType
	(Language)(0),    // 2: language.Language
	(*Word)(nil),     // 3: language.Word
	(*Symbol)(nil),   // 4: language.Symbol
	(*Referent)(nil), // 5: language.Referent
}
var file_language_types_proto_depIdxs = []int32{
	0, // 0: language.Word.word_type:type_name -> language.WordType
	2, // 1: language.Symbol.language:type_name -> language.Language
	1, // 2: language.Symbol.symbol_type:type_name -> language.SymbolType
	3, // 3: language.Symbol.lemma:type_name -> language.Word
	3, // 4: language.Symbol.words:type_name -> language.Word
	4, // 5: language.Referent.symbols:type_name -> language.Symbol
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_language_types_proto_init() }
func file_language_types_proto_init() {
	if File_language_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_language_types_proto_rawDesc), len(file_language_types_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_language_types_proto_goTypes,
		DependencyIndexes: file_language_types_proto_depIdxs,
		EnumInfos:         file_language_types_proto_enumTypes,
		MessageInfos:      file_language_types_proto_msgTypes,
	}.Build()
	File_language_types_proto = out.File
	file_language_types_proto_goTypes = nil
	file_language_types_proto_depIdxs = nil
}
